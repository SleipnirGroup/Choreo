import edu.wpi.first.toolchain.*

plugins {
    id 'cpp'
    id 'java'
    id 'java-library'
    id 'google-test'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.NativeUtils' version '2025.6.0'
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id 'edu.wpi.first.GradleVsCode' version '2.1.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
}

ext.getCurrentArch = {
    return NativePlatforms.desktop
}

def systemArch = getCurrentArch()

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}
// TODO: revert once WPILib releases 2025.1.1-beta-3
wpilibRepositories.addAllDevelopmentRepositories(project)
// if (project.hasProperty('releaseMode')) {
//     wpilibRepositories.addAllReleaseRepositories(project)
// } else {
//     wpilibRepositories.addAllDevelopmentRepositories(project)
// }

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
    implementation 'edu.wpi.first.wpilibj:wpilibj-java:2025.+'
    implementation 'edu.wpi.first.wpiutil:wpiutil-java:2025.+'
    implementation 'edu.wpi.first.wpimath:wpimath-java:2025.+'
    implementation 'edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:2025.+'
    implementation 'edu.wpi.first.wpiunits:wpiunits-java:2025.+'
    implementation 'edu.wpi.first.ntcore:ntcore-java:2025.+'
    implementation 'edu.wpi.first.ntcore:ntcore-jni:2025.+'
    implementation 'edu.wpi.first.hal:hal-java:2025.+'

    api "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    api "com.fasterxml.jackson.core:jackson-core:2.15.2"
    api "com.fasterxml.jackson.core:jackson-databind:2.15.2"

    implementation 'com.google.code.gson:gson:2.11.0'

    // This is needed to use wpilibj Filesystem class
    testImplementation 'edu.wpi.first.cscore:cscore-java:2025.+'
    testImplementation 'edu.wpi.first.cameraserver:cameraserver-java:2025.+'
    testImplementation 'edu.wpi.first.hal:hal-java:2025.+'

    testImplementation 'us.hebi.quickbuf:quickbuf-runtime:1.3.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


// Set up java tests
test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

if (project.hasProperty('onlylinuxathena') || project.hasProperty('onlylinuxarm32') || project.hasProperty('onlylinuxarm64') || project.hasProperty('onlywindowsarm64')) {
    test.enabled = false
}

// Set up exports properly
nativeUtils {
    exportsConfigs {
        ChoreoLib {
            x86ExcludeSymbols = [
                '_CT??_R0?AV_System_error',
                '_CT??_R0?AVexception',
                '_CT??_R0?AVfailure',
                '_CT??_R0?AVruntime_error',
                '_CT??_R0?AVsystem_error',
                '_CTA5?AVfailure',
                '_TI5?AVfailure',
                '_CT??_R0?AVout_of_range',
                '_CTA3?AVout_of_range',
                '_TI3?AVout_of_range',
                '_CT??_R0?AVbad_cast'
            ]
            x64ExcludeSymbols = [
                '_CT??_R0?AV_System_error',
                '_CT??_R0?AVexception',
                '_CT??_R0?AVfailure',
                '_CT??_R0?AVruntime_error',
                '_CT??_R0?AVsystem_error',
                '_CTA5?AVfailure',
                '_TI5?AVfailure',
                '_CT??_R0?AVout_of_range',
                '_CTA3?AVout_of_range',
                '_TI3?AVout_of_range',
                '_CT??_R0?AVbad_cast'
            ]
        }
    }
}

model {
    components {
        ChoreoLib(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }
            }
            nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
        }
    }
    testSuites {
        ChoreoLibTest {
            sources.cpp {
                source {
                    srcDir 'src/test/native/cpp'
                    include '**/*.cpp'
                }
            }

            nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")

            binaries.all {
                def arch = it.targetPlatform.name
                if (systemArch == arch && it.buildType.name == 'debug') {
                    def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'
                    test.dependsOn it.tasks.install
                    test.systemProperty 'java.library.path', filePath
                    test.environment 'LD_LIBRARY_PATH', filePath
                    test.workingDir filePath
                }
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

javadoc {
    options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
    options.links("https://github.wpilib.org/allwpilib/docs/release/java/")
    options.addBooleanOption("Xdoclint:html,missing,reference,syntax", true)
    options.addBooleanOption('html5', true)
    options.addStringOption("charset", "utf-8")
    options.addStringOption("docencoding", "utf-8")
    options.addStringOption("encoding", "utf-8")
    options.linkSource(true)
    failOnError = true

    title = "ChoreoLib API"

    // Treat javadoc warnings as errors.
    //
    // The second argument '-quiet' is a hack. The one parameter
    // addStringOption() doesn't work, so we add '-quiet', which is added
    // anyway by gradle. See https://github.com/gradle/gradle/issues/2354.
    options.addStringOption('Werror', '-quiet')
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
}

test {
    dependsOn cleanTest

    useJUnitPlatform()
    testLogging.showStandardStreams = true

    finalizedBy jacocoTestReport
}

apply from: 'publish.gradle'

wrapper {
    gradleVersion '8.11'
}
