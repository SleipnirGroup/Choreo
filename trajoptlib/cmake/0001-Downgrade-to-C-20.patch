From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tyler Veness <calcmogul@gmail.com>
Date: Sat, 11 Jan 2025 17:45:42 -0800
Subject: [PATCH] Downgrade to C++20

---
 .styleguide                       |  1 +
 CMakeLists.txt                    | 10 ++++++++++
 cmake/modules/CompilerFlags.cmake |  2 +-
 include/.styleguide               |  1 +
 include/sleipnir/util/Print.hpp   | 27 ++++++++++++++-------------
 include/sleipnir/util/Spy.hpp     |  8 +++++++-
 6 files changed, 34 insertions(+), 15 deletions(-)

diff --git a/.styleguide b/.styleguide
index 2cf272a115102886134455a87ea5c7dcf7188283..76e25473e77ab7838509eaeeefa7170a06507f8c 100644
--- a/.styleguide
+++ b/.styleguide
@@ -17,6 +17,7 @@ modifiableFileExclude {
 includeOtherLibs {
   ^Eigen/
   ^catch2/
+  ^fmt/
   ^nanobind/
   ^sleipnir/
 }
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 46a2e975b631269b552c3ab5963168a6813a1f5f..77bcfdd55b93f1d779b08f35974c2a8438bdac3b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -114,6 +114,16 @@ endif()
 
 target_link_libraries(Sleipnir PUBLIC Eigen3::Eigen)
 
+# fmt dependency
+fetchcontent_declare(
+    fmt
+    GIT_REPOSITORY https://github.com/fmtlib/fmt.git
+    GIT_TAG 11.1.2
+)
+fetchcontent_makeavailable(fmt)
+
+target_link_libraries(Sleipnir PUBLIC fmt::fmt)
+
 if(BUILD_TESTING)
     # Catch2 dependency
     fetchcontent_declare(
diff --git a/cmake/modules/CompilerFlags.cmake b/cmake/modules/CompilerFlags.cmake
index bab9de4de2c79abb3195cdd8b3a8b56da665e900..8caa4b1d7c7f4be463b2541fba91561428193d51 100644
--- a/cmake/modules/CompilerFlags.cmake
+++ b/cmake/modules/CompilerFlags.cmake
@@ -22,7 +22,7 @@ macro(compiler_flags target)
         )
     endif()
 
-    target_compile_features(${target} PUBLIC cxx_std_23)
+    target_compile_features(${target} PUBLIC cxx_std_20)
     if(MSVC)
         target_compile_options(${target} PUBLIC /MP /utf-8 /bigobj)
     endif()
diff --git a/include/.styleguide b/include/.styleguide
index 8fb61fdf9cc5ceff633d3126f0579eef25a1326f..6a7f8ed28f9cb037c9746a7e0ef5e110481d9825 100644
--- a/include/.styleguide
+++ b/include/.styleguide
@@ -12,4 +12,5 @@ licenseUpdateExclude {
 
 includeOtherLibs {
   ^Eigen/
+  ^fmt/
 }
diff --git a/include/sleipnir/util/Print.hpp b/include/sleipnir/util/Print.hpp
index a746cb77b70f095bb15f4c493295cb925bc74cd3..484d1b2bec7148c5b9affccbf554c7df2b954cc0 100644
--- a/include/sleipnir/util/Print.hpp
+++ b/include/sleipnir/util/Print.hpp
@@ -3,52 +3,53 @@
 #pragma once
 
 #include <cstdio>
-#include <print>
 #include <system_error>
 #include <utility>
 
+#include <fmt/base.h>
+
 namespace sleipnir {
 
 /**
- * Wrapper around std::print() that squelches write failure exceptions.
+ * Wrapper around fmt::print() that squelches write failure exceptions.
  */
 template <typename... T>
-inline void print(std::format_string<T...> fmt, T&&... args) {
+inline void print(fmt::format_string<T...> fmt, T&&... args) {
   try {
-    std::print(fmt, std::forward<T>(args)...);
+    fmt::print(fmt, std::forward<T>(args)...);
   } catch (const std::system_error&) {
   }
 }
 
 /**
- * Wrapper around std::print() that squelches write failure exceptions.
+ * Wrapper around fmt::print() that squelches write failure exceptions.
  */
 template <typename... T>
-inline void print(std::FILE* f, std::format_string<T...> fmt, T&&... args) {
+inline void print(std::FILE* f, fmt::format_string<T...> fmt, T&&... args) {
   try {
-    std::print(f, fmt, std::forward<T>(args)...);
+    fmt::print(f, fmt, std::forward<T>(args)...);
   } catch (const std::system_error&) {
   }
 }
 
 /**
- * Wrapper around std::println() that squelches write failure exceptions.
+ * Wrapper around fmt::println() that squelches write failure exceptions.
  */
 template <typename... T>
-inline void println(std::format_string<T...> fmt, T&&... args) {
+inline void println(fmt::format_string<T...> fmt, T&&... args) {
   try {
-    std::println(fmt, std::forward<T>(args)...);
+    fmt::println(fmt, std::forward<T>(args)...);
   } catch (const std::system_error&) {
   }
 }
 
 /**
- * Wrapper around std::println() that squelches write failure exceptions.
+ * Wrapper around fmt::println() that squelches write failure exceptions.
  */
 template <typename... T>
-inline void println(std::FILE* f, std::format_string<T...> fmt, T&&... args) {
+inline void println(std::FILE* f, fmt::format_string<T...> fmt, T&&... args) {
   try {
-    std::println(f, fmt, std::forward<T>(args)...);
+    fmt::println(f, fmt, std::forward<T>(args)...);
   } catch (const std::system_error&) {
   }
 }
diff --git a/include/sleipnir/util/Spy.hpp b/include/sleipnir/util/Spy.hpp
index 1abeb469a43d3d644efc1ad0e06e43928149ed0a..ae112430d7609356748b81d5dc4d0b5a7bac0ca1 100644
--- a/include/sleipnir/util/Spy.hpp
+++ b/include/sleipnir/util/Spy.hpp
@@ -4,7 +4,10 @@
 
 #include <stdint.h>
 
+#include <algorithm>
+#include <array>
 #include <bit>
+#include <cstddef>
 #include <fstream>
 #include <string>
 #include <string_view>
@@ -112,7 +115,10 @@ class SLEIPNIR_DLLEXPORT Spy {
    */
   void Write32le(int32_t num) {
     if constexpr (std::endian::native != std::endian::little) {
-      num = std::byteswap(num);
+      auto value_representation =
+          std::bit_cast<std::array<std::byte, sizeof(int32_t)>>(num);
+      std::ranges::reverse(value_representation);
+      num = std::bit_cast<int32_t>(value_representation);
     }
     m_file.write(reinterpret_cast<char*>(&num), sizeof(num));
   }
