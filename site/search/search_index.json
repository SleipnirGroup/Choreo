{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Choreo (Constraint-Honoring Omnidirectional Route Editor and Optimizer, pronounced like choreography) is a graphical tool for planning time-optimized trajectories for autonomous mobile robots in the FIRST Robotics  Competition.</p> <p>Main features of Choreo: - Each path is created by trajectory optimization instead of B\u00e9zier curves, allowing for more precise movements - Easy to use Graphical Interface allowing real time playback - Different types of waypoints and constraints along the path - Robot-side vendor library installation - Holonomic mode allows robots to move freely from its rotation</p>"},{"location":"#getting-started","title":"[[Getting Started]]","text":""},{"location":"#choreo-gui","title":"Choreo GUI","text":"<ul> <li>[[Editing Paths]]</li> <li>[[Controls &amp; Shortcuts]]</li> </ul>"},{"location":"#choreolib","title":"ChoreoLib","text":"<ul> <li>[[ChoreoLib Installation]]</li> <li>[[ChoreoLib Java Usage]]</li> </ul>"},{"location":"Building-Choreo/","title":"Building Choreo","text":""},{"location":"Building-Choreo/#development-system-dependencies","title":"Development System Dependencies","text":"<p>Requirements for all platforms:</p> <ul> <li>npm</li> <li>Rust</li> <li>CMake</li> <li>clang</li> </ul>"},{"location":"Building-Choreo/#windows","title":"Windows","text":"<p>Choreo can be built and run on Windows, but it requires a few extra steps because CasADi requires the MinGW toolchain.</p>"},{"location":"Building-Choreo/#windows-environment","title":"Windows Environment","text":"<p>Buliding on Windows requires MinGW. On the release page, download the binary labeled <code>x86_64</code>, <code>posix</code>, and <code>msvcrt</code>. Extract the <code>mingw64</code> folder to <code>C:\\mingw64</code>. Add an entry to the user or system <code>PATH</code> environment variable that points to <code>C:\\mingw64\\bin</code>.</p> <p>After installing MinGW, run <code>rustup default stable-gnu</code> to switch to the GNU toolchain that uses MinGW. This can be reverted using <code>rustup default stable-msvc</code> when returning to other rust projects.</p> <p>Run <code>npm install</code> to build Node.js dependencies and TrajoptLib. Once it is finished, the libraries will be copied into <code>src-tauri/*.dll</code>. You will need to redo this step if Choreo begins using a different version of TrajoptLib.</p>"},{"location":"Building-Choreo/#windows-dev-server","title":"Windows Dev Server","text":"<p>Run <code>npm run tauri dev -- --release</code> to start the dev server.</p> <p>The <code>--release</code> avoids issue #84.</p> <p>If you're having a permissions error with CMake, try first building using the <code>cargo</code> command directly:</p> <pre><code>cd src-tauri\ncargo build --release\n</code></pre> <p>Then try <code>npm run tauri dev -- --release</code> again.</p>"},{"location":"Building-Choreo/#windows-bundle","title":"Windows Bundle","text":"<p>To create an NSIS <code>.exe</code> installer bundle, run <code>npm run tauri build</code>. It will report the location of the bundle upon completion.</p>"},{"location":"Building-Choreo/#macos","title":"macOS","text":"<p>The following steps can be used to build for arm64 or x86_64 architectures.</p>"},{"location":"Building-Choreo/#macos-environment","title":"macOS Environment","text":"<p>Make sure Xcode command line tools are installed:</p> <pre><code>xcode-select --install\n</code></pre> <p>Run <code>npm install</code> to build Node.js dependencies and TrajoptLib. Once it is finished, the libraries will be copied into <code>src-tauri/lib*.dylib</code>. You will need to redo this step if Choreo begins using a different version of TrajoptLib.</p>"},{"location":"Building-Choreo/#macos-cross-compilation","title":"macOS Cross Compilation","text":"<p>An <code>arm64</code> or <code>x86_64</code> Mac can be used to build for <code>arm64</code> or <code>x86_64</code> targets. The target architecture will be the currently selected Rust target triple.</p> <p>You can create a <code>config.toml</code> file in <code>src-tauri/.cargo</code> containing the following definition to change the target from the native architecture to the other:</p> <pre><code>[build]\ntarget = \"aarch64-apple-darwin\" # arm64 (Apple Silicon) target\n</code></pre> <p>or,</p> <pre><code>[build]\ntarget = \"x86_64-apple-darwin\" # x86_64 (Intel) target\n</code></pre> <p>You must first install the Rust targets using <code>rustup target install &lt;target&gt;</code>.</p>"},{"location":"Building-Choreo/#macos-dev-server","title":"macOS Dev Server","text":"<p>Run <code>npm run tauri dev</code> to start the dev server.</p>"},{"location":"Building-Choreo/#macos-bundle","title":"macOS Bundle","text":"<p>To create a <code>.dmg</code> macOS bundle, run <code>npm run tauri build</code>. It will report the location of the bundle upon completion.</p>"},{"location":"Building-Choreo/#linux","title":"Linux","text":"<p>The following steps can be used for Ubuntu Linux; others may require additional configuration. If you find any additional required steps for your distro, please create a PR or issue to add documentation for it.</p>"},{"location":"Building-Choreo/#linux-environment","title":"Linux Environment","text":"<p>Tauri requires some libraries to function, follow their instructions.</p> <p>Run <code>npm install</code> to build Node.js dependencies and TrajoptLib. Once it is finished, the libraries will be copied into <code>src-tauri/lib*.so*</code>. You will need to redo this step if Choreo begins using a different version of TrajoptLib.</p>"},{"location":"Building-Choreo/#linux-dev-server","title":"Linux Dev Server","text":"<p>Due to issue #89, you must manually copy all files matching <code>src-tauri/lib*.so*</code> into <code>src-tauri/target/debug/</code> to ensure they can be found for the next step.</p> <p>Run <code>npm run tauri dev</code> to start the dev server.</p>"},{"location":"Building-Choreo/#linux-bundle","title":"Linux Bundle","text":"<p>To create a <code>.deb</code> Debian/Ubuntu bundle, run <code>npm run tauri build</code>. It will report the location of the bundle upon completion.</p>"},{"location":"Building-Choreo/#tech-stack","title":"Tech stack","text":"<ul> <li>\ud83d\udcc8 CasADi: Numerical optimizer</li> <li>\ud83d\udda5\ufe0f Tauri: Desktop applications</li> <li>\u269b\ufe0f React: JS Framework</li> <li>\ud83d\ude97 TrajoptLib: Uses CasADi to generate paths</li> <li>\ud83e\udd80 Rust: Backend code</li> <li>\u26a1\ufe0f Vite</li> </ul>"},{"location":"Building-Choreo/#tauri-recommended-ide-setup","title":"Tauri Recommended IDE Setup","text":"<ul> <li>VS Code + Tauri + rust-analyzer</li> </ul>"},{"location":"ChoreoLib-Installation/","title":"ChoreoLib Installation","text":"<p>Install ChoreoLib to your robot project by copy pasting the following link into the vendor library installation dialog:</p> <pre><code>https://sleipnirgroup.github.io/ChoreoLib/dep/ChoreoLib.json\n</code></pre> <p>The installation method is the same as CTRE, PathPlanner, and more. Read more on Vendor Dependencies and their installation (VSCode \u2014&gt; install new library (online)) here.</p>"},{"location":"ChoreoLib-Installation/#building-manually","title":"Building Manually","text":"<p>If you attempt to work with this project in VSCode with WPILib plugins, it will ask you if you want to import the project. Click no. This will change the project into a robot code project and break everything.</p> <p>The maven artifacts can be built using <code>./gradlew publish</code> or <code>./gradlew publishToMavenLocal</code> for local library access.</p> <p>note: if you run <code>gradlew</code> on a unix system and end up with <code>permission denied</code>, then run <code>sudo chmod +x choreolib/gradlew</code> or the <code>gradlew</code> location given.</p> <p>The built library will be located in the respective operating system's m2 folder. By default, Maven local repository is defaulted to ${user.home}/.m2/repository folder:</p> <ul> <li>Unix/Mac OS X - <code>~/.m2/repository</code></li> <li>Windows \u2013 <code>C:\\Users\\{your-username}\\.m2\\repository</code></li> </ul>"},{"location":"ChoreoLib-Java-Usage/","title":"ChoreoLib Java Usage","text":"<pre><code>import com.choreo.lib.*;\n\n// do not include .traj extension when referencing the file name\n// this file should be in: \"{deployDirectory}/choreo/\"\nChoreoTrajectory traj = Choreo.getTrajectory(\"Trajectory\");\n\n// Create a swerve command for the robot to follow the trajectory\nChoreo.choreoSwerveCommand(\n    traj, // Choreo trajectory from above\n    this::getPose // A function that returns the current field-relative pose of the robot: your wheel or vision odometry\n    new PIDController(Constants.AutoConstants.kPXController, 0.0, 0.0), // PIDController for field-relative X translation (input: X error in meters, output: m/s).\n    new PIDController(Constants.AutoConstants.kPXController, 0.0, 0.0), // PIDController for field-relative Y translation (input: Y error in meters, output: m/s).\n    new PIDController(Constants.AutoConstants.kPThetaController, 0.0, 0.0), // PID constants to correct for rotation error\n    (ChassisSpeeds speeds) -&gt; // A function that consumes the target robot-relative chassis speeds and commands them to the robot\n        this.drive(new Translation2d(speeds.vxMetersPerSecond, speeds.vyMetersPerSecond), ...),\n    true, // Whether or not to mirror the path based on alliance (this assumes the path is created for the blue alliance)\n    this, // The subsystem(s) to require, typically your drive subsystem (this) only\n);\n</code></pre>"},{"location":"Controls-%26-Shortcuts/","title":"Controls & Shortcuts","text":""},{"location":"Controls-%26-Shortcuts/#ui","title":"UI","text":"Shortcut Description Left Mouse Click Add selected waypoint from navbar at click position Left Mouse Drag Panning around the map Scroll Wheel, Trackpad gesture Zoom in or out of the map Delete/Backspace Delete highlighted waypoint Ctrl/\u2318 + Z Undo Ctrl/\u2318 + Shift + Z, Ctrl/\u2318 + Y Redo Ctrl/\u2318 + N Creates a new File Left Arrow Highlights previous waypoint Right Arrow Highlights next waypoint G, Ctrl/\u2318 + G Generates current path F Add selected waypoint from navbar at last waypoint location. Defaults to coordinate (5, 5) 1 through 4 Selects waypoint type in navbar (2 selects 2nd waypoint type, Translation Waypoint)"},{"location":"Controls-%26-Shortcuts/#waypoint-rotation","title":"Waypoint Rotation","text":"<p>NOTE: Holding Shift changes rotation to \u03c0/4. For example, Shift + E rotates selected waypoint by -\u03c0/4 (clockwise)</p> Shortcut Description E Rotates selected waypoint by -\u03c0/16 (clockwise) Q Rotates selected waypoint by \u03c0/16 (counterclockwise)"},{"location":"Controls-%26-Shortcuts/#waypoint-translation","title":"Waypoint Translation","text":"<p>NOTE: Holding Shift changes translation to 0.5m</p> Shortcut Description W Translates selected waypoint by 0.1m up S Translates selected waypoint by 0.1m down A Translates selected waypoint by 0.1m left D Translates Selected waypoint by 0.1m right <p>NOTE: For all shortcuts with Ctrl/\u2318 on macOS, pressing Ctrl is the same command as pressing \u2318</p>"},{"location":"Editing-Paths/","title":"Editing Paths","text":"<p>Unlike traditional path planners that rely on user-defined splines, Choreo uses trajectory optimization to mathematically draw out the most optimal route through paths. Additionally, Choreo allows fine-grained customization while still maintaining concrete stability. This allows for smoother paths and better odometry.</p>"},{"location":"Editing-Paths/#waypoints","title":"Waypoints","text":"<p>Waypoints are an ordered position that you'd like to hit on your path. There are multiple types of waypoints based on what you'd like to constrain in your path.</p> <p>To add a waypoint, select the type of waypoint from the waypoints navbar on the top to get started, then click on the field where you want it. Your waypoints will show up on the sidebar. A yellow dot represents the currently selected waypoint, green for the starting waypoint, and red for the ending waypoint.</p> <p></p>"},{"location":"Editing-Paths/#pose-waypoints","title":"Pose Waypoints","text":"<p>Pose Waypoint is the first button on the waypoints navbar and consists of a translation and a rotation. Drag the little yellow circle (outlined in black) to change the heading. - X and Y: position in meters from the bottom left (origin) - \u03b8: Angular offset in radians -pi to pi, 0 to right</p> <p></p>"},{"location":"Editing-Paths/#translation-waypoints","title":"Translation Waypoints","text":"<p>Translation Waypoint is the second button on the waypoints navbar and consists of a translation but not a rotation. The UI still includes the yellow circle, but isn't only stored to be able to convert later into a Pose Waypoint. However, rotation is still used as part of the initial guess. - X and Y: position in meters from the bottom left (origin)</p> <p></p>"},{"location":"Editing-Paths/#empty-waypoint","title":"Empty Waypoint","text":"<p>The Empty Waypoint allows you to apply a constraint somewhere along a segment without putting a position or heading constraint at that waypoint. (similar to constraints).</p>"},{"location":"Editing-Paths/#initial-guess-point","title":"Initial Guess Point","text":"<p>The initial guess waypoint just affects the straight-line-between-waypoints gray line, which is used as the starting point for optimization. (Until obstacles are added, this doesn\u2019t have much effect.)</p>"},{"location":"Editing-Paths/#constraints","title":"Constraints","text":"<p>Constraints are limitations that the optimizer needs to respect while generating a path. Different constraints can be applied in different scopes or ranges.</p>"},{"location":"Editing-Paths/#waypoint-scope","title":"Waypoint Scope","text":"<p>Applies this constraint between at that specific waypoint.</p>"},{"location":"Editing-Paths/#segment-scope","title":"Segment Scope","text":"<p>Applies this constraint between waypoints (intuitive example: think constraining your trajectory as a straight line between two waypoints)</p>"},{"location":"Editing-Paths/#waypoint-segment-scope","title":"Waypoint + Segment Scope","text":"<p>Like a segment scope, but including segments (intuitive example: think of zero angular velocity)</p> Name Description Waypoint Scope Segment Scope Waypoint Velocity Direction Constrains the robot's direction of travel at a waypoint. Yes No Waypoint Zero Velocity Stop at a certain point Yes No Max Velocity Constrains the max velocity to a specific value throughout multiple waypoints/segments This generally refers to the Maximum Velocity of robot chassis in m/s. A default value can be defined in Robot Config ([[Getting Started]]) Yes Yes Zero Angular Velocity Ensures zero angular velocity through the waypoint and/or segment scope. Yes Yes Straight Line Tells the solver to draw a straight line as the path between two immediate waypoints. No Yes"},{"location":"Editing-Paths/#generating","title":"Generating","text":"<p>You can create paths by chaining waypoints together. Check out [[Controls &amp; Shortcuts]] for advanced controls. Once you have at least two waypoints, then you can generate a path. You can cancel the path generation by clicking the red X once it has started.</p> <p>If there is an error generating a path, check to make sure your waypoints can physically work.</p> <p></p>"},{"location":"Getting-Started/","title":"Getting Started","text":""},{"location":"Getting-Started/#start-by-downloading-choreo-from-releases","title":"Start by downloading Choreo from Releases","text":""},{"location":"Getting-Started/#robot-config","title":"Robot Config","text":"<p>The trajectory optimizer depends upon the following user-specified parameters, which are entered in the Robot Configuration panel. This helps the optimizer understand the robot's projected path very accurately.</p> <ul> <li>Mass [kg]: The mass of the robot with battery and bumpers</li> <li>MoI [kg * m<sup>2</sup>]: The resistance to change in rotational velocity in response to a torque applied to the robot about the vertical axis</li> <li>Max Velocity [m/s]: The maximum tangential speed of the wheel<ul> <li>Note: A reasonable choice of Max Velocity is that corresponding to ~80% of free speed experienced at the drive motor(s)</li> </ul> </li> <li>Max Torque [N * m]: The maximum torque applied at the wheel<ul> <li>Note: A reasonable choice of Max Torque is that corresponding to a current draw of approximately <code>1.5 * BreakerValue</code> experienced at the drive motor(s)</li> </ul> </li> <li>Wheelbase and Trackwidth [m]: The largest distances between the robot's wheel centers</li> <li>Length and Width [m]: The overall size of the robot's bumper.</li> </ul>"},{"location":"Getting-Started/#measuring-moment-of-inertia-moi","title":"Measuring moment of Inertia (MoI)","text":"<p>The robot's rotational inertia has a significant impact on how quickly it can follow complex paths. For the best results, it is recommended to get as accurate an estimate of this parameter as possible. This can be accomplished via:</p> <ul> <li>Faithful CAD loaded with mass properties</li> <li>Physical experimentation</li> <li>System Identification methods</li> </ul> <p>If none of these techniques are possible, a reasonable estimate of MoI would be mass * length * width / 6 based on the assumption of a rectangle of uniformly-distributed mass.</p>"},{"location":"Getting-Started/#recommendations","title":"Recommendations","text":"<p>Of course, more precision is always better. But after 2 decimals, you will most likely get diminishing returns.</p> <p>Saving this file somewhere safe, like the root of a robot project, is highly recommended. This is so you can correlate that robot project to your robot's specifications, and thus your paths.</p>"},{"location":"Sidebar/","title":"Sidebar","text":"<p>To access the sidebar, click the hamburger icon (top left of window).</p> <p>General Info:</p> <ul> <li>Choreo\u2019s file saving mechanism ties into a WPILib robot root directory, wherein a single <code>.chor</code> file lives in the project\u2019s root folder.</li> </ul> <p>There are 5 options as well as a description below those pertaining to saving info.</p>"},{"location":"Sidebar/#open-file","title":"Open File","text":"<p>This opens the system\u2019s file select dialog to select the robot\u2019s <code>.chor</code> file. This should already be in your robot project root folder.</p>"},{"location":"Sidebar/#save-file","title":"Save File","text":"<p>This opens the system\u2019s file save dialog to select where to save the robot\u2019s <code>.chor</code> file. Choreo strongly recommends saving this file in your robot project root folder.</p>"},{"location":"Sidebar/#new-file","title":"New File","text":"<p>Creates a new file in memory, essentially clearing all trajectories. If you have unsaved changes, Choreo will ask before clearing them.</p>"},{"location":"Sidebar/#export-trajectory","title":"Export Trajectory","text":"<p>Exports the trajectory as a file individually as the path selected in the UI. This is not tied with the robot project structure, rather for you to get the trajectory file.</p>"},{"location":"Sidebar/#save-all-trajectories","title":"Save All Trajectories","text":"<p>This saves all the trajectories into the folder structure described below.</p>"},{"location":"Sidebar/#folder-structure","title":"Folder Structure","text":"<p>Example: \u2026</p>"}]}